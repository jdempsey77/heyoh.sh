#!/bin/sh 
# version 1.0 - jerry dempsey (jerry@stylee.org)
#   original version
# version 1.2 - jeremy beck (jabeck@gmail.com)
#   added error checking for open ports and needed binaries
# version 2.0 - jerry  
#   made the http protocol injector more robust 
#   added put command
# version 2.1 - jerry
#   cleaned up code
# version 3.0 - jerry
#   added -p for user specified port
# version 3.1 - jerry
#   added -n and -h 
# version 3.2 - jerry
#   added post and http binary commands
# version 3.3 - jerry
#   added boping
# version 3.4 - jerry
#   added -v and -s
# version 3.5 - jerry
#   added eicar virus test file testing via smtp
# version 3.6 - jerry
#   added pop3 support
# version 3.7 - jerry
#   script cleanup
##############
#  This script can be used to spawn multiple connections to a single
#  port and send expected data.  
##############
version="v3.7"
GET="GET / HTTP/1.0\r\nHost: heyoh.sh\r\nReferer: http://heyoh.sh\r\nUser-Agent: heyohi\r\n"
PUT="PUT / HTTP/1.0\r\nHost: heyoh.sh\r\nReferer: http://heyoh.sh\r\nUser-Agent: heyoh\r\n"
POST="POST / HTTP/1.0\r\nHost: heyoh.sh\r\nReferer: http://heyoh.sh\r\nUser-Agent: heyoh\r\n"
BINARY="\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
BOPING="\x1D\xA3\x2B\x85\x4F\x55\x00\xBB\x37\xF8\xAB\x30\x72\x2C\xAF\x80\xB1\x66\xBC\x9C\x7B\xF4\x5E\x41\x87\xBF\x16\x1C\x27\x3F\x87\xC5\x1E\xCC\x67\x45\xC0\xBE\xE0\xC7\x24\xFD\x2F"
nc="/usr/bin/nc"
email="This e-mail has been generated by heyoh.sh!"
testvirus='X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'
WHOAMI=`whoami`
HOSTNAME=`hostname`
DATE=""
body=""


EMAIL()
{
(echo -e "helo $HOSTNAME\r"; echo -e "mail from: <$WHOAMI@$HOSTNAME>\r"; echo -e "rcpt to: <heyoh@localhost>\r"; echo -e "data\r"; sleep 1; echo -e "To: <heyoh@localhost>\r\n$DATE\r\nFrom: <$WHOAMI@$HOSTNAME>\r\nsubject: Heyoh!\r\n\r\n$body\r\n.\r") | $nc -w 1 -v $desthost $smtp
}

FTP()
{
(echo "user heyoh"; echo "pass heyoh"; sleep 1; echo "SYST"; sleep 1; echo PWD) | nc -w 1 -v $desthost $ftp 
}

POP3()
{
(echo "USER heyoh"; sleep 1 ; echo "PASS heyoh" ; sleep 1 ; echo "LIST" ; sleep 1; echo "RETR 1") | nc -w 1 -v $desthost $pop3
}

SSH()
{
echo SSH-1.5-HeyohSSH_$version | $nc -w 1 -v $desthost $ssh
}

BOPING()
{
echo -e $BOPING | $nc -p 53 -u -w 1 $desthost $bo 
}

### PORTS ###
ftp="21"
ssh="22"
smtp="25"
http="80"
pop3="110"
bo="31337"

if [ ! -x $nc ] ; then
	echo "fatal: cannot find /usr/bin/nc"
	exit 1
fi

Usage()
{
	cat <<EOF >&2
  HEYOH - [$version]  
  Usage $0 <host|IP> <command> [-n # of times] [-p port] [-v] [-s] 
  
    -n number of times to send
    -p port
    -v verbose
    -s number of seconds to sleep between each request
    -h help (for command help)

EOF
	exit 0
}

Help()
{
	cat <<EOF
HEYOH - [$version]
  Usage $0 <host|IP> <command> <# of times> [-p port] [-v] [-s]
 
    -n number of times to send
    -p port
    -v verbose
    -s number of seconds to sleep between each request
    -h this help message

Command Help

httpget:  HTTP Request using method of GET to resource of / (Default port 80)
httpput:  HTTP Request using method of PUT to resource of / (Default port 80)
httppost: HTTP Request using method of POST to resource of / (Default port 80)
httpbin:  HTTP Request that contains binary data (Default port 80)
wiz:      Connection data of "WIZ" sent to given port (Default port 25)
smtp:     Sends expected SMTP commands (Default port 25)
eicar:    Send the EICAR virus testfile via SMTP (Default port 25)
pop3:	  Retrieves a email message from a POP3 server (Default port 110)
ftp:      Sends expected FTP commands (Default port 21)
ssh:      Sends SSH type banner ie: SSH-1.5-HeyohSSH_2.1 (Default port 22)
boping:   Sends a Back Orifice Ping (Default Port 31337 w/ source port of 53)

NOTE: for all commands to work properly it is suggested to add an account to remote machine withusername and password of heyoh.

EOF
	exit 0
}

desthost=
proto=
loopcount=1
verbose=0
sleep=0
while [ $# -gt 0 ]; do
	case $1 in
        -s)     shift 1
                [  $# -eq 0 ] && Usage
                sleep="$1"
                ;;
        -v)     verbose=1 ;;
	-h)
		Help
		;;
	-n)
		shift 1
		[  $# -eq 0 ] && Usage
		loopcount="$1"
		;;
	-p)
		shift 1
		[  $# -eq 0 ] && Usage
		ftp="$1"
		ssh="$1"
		smtp="$1"
		http="$1"
		pop3="$1"
		bo="$1"
		;;
	*)
		if [ -z "$desthost" ]; then
			desthost="$1"
		elif [ -z "$proto" ]; then
			proto="$1"
		else
			Usage
		fi
		;;
	esac
	shift 1
done

[ -z "$proto" ] && Usage

case "$proto" in
'httpget')
        if nc -z $desthost $http &>/dev/null; then
          echo "Sending $loopcount requests to $desthost..."
	  while [ $loopcount -ne 0 ] ; do
                if [ $verbose -ne 0 ] ; then
			echo -e $GET | $nc -w 1 -v $desthost $http
		else
			echo -e $GET | $nc -w 1 $desthost $http > /dev/null 2>&1 &
		fi
                sleep $sleep
                echo -ne "$loopcount             \015"
		loopcount=`expr $loopcount - 1`
          done
	  echo "Done!"
	else 
	  echo "fatal: $http port is not open"
	  exit 0
	fi
	;;

'httpput')
        if nc -z $desthost $http &>/dev/null; then
          echo "Sending $loopcount requests to $desthost..."
          while [ $loopcount -ne 0 ] ; do
                if [ $verbose -ne 0 ] ; then
                	echo -e $PUT | $nc -w 1 -v $desthost $http
                else
			echo -e $PUT | $nc -w 1 $desthost $http > /dev/null 2>&1 &
                fi
		sleep $sleep
                echo -ne "$loopcount             \015"
                loopcount=`expr $loopcount - 1`
          done
          echo "Done!"
        else
          echo "fatal: $http port is not open"
          exit 0
        fi
        ;;

'httppost')
        if nc -z $desthost $http &>/dev/null; then
          echo "Sending $loopcount requests to $desthost..."
          while [ $loopcount -ne 0 ] ; do
		if [ $verbose -ne 0 ] ; then
                	echo -e $POST | $nc -w 1 -v $desthost $http
                else
			echo -e $POST | $nc -w 1 $desthost $http > /dev/null 2>&1 &
		fi
		sleep $sleep
                echo -ne "$loopcount             \015"
                loopcount=`expr $loopcount - 1`
          done
          echo "Done!"
        else   
          echo "fatal: $http port is not open"
          exit 0
        fi
        ;;
      
'httpbin')
        if nc -z $desthost $http &>/dev/null; then
          echo "Sending $loopcount requests to $desthost..."
          while [ $loopcount -ne 0 ] ; do
		if [ $verbose -ne 0 ] ; then
			echo -e $GET$BINARY | $nc -w 1 -v $desthost $http
		else
                	echo -e $GET$BINARY | $nc -w 1 $desthost $http > /dev/null 2>&1 &
                fi
		sleep $sleep
                echo -ne "$loopcount             \015"
                loopcount=`expr $loopcount - 1`
          done
          echo "Done!"
        else
          echo "fatal: $http port is not open"
          exit 0
        fi
        ;;

'wiz')
	if nc -z $desthost $smtp &>/dev/null; then
          echo "Sending $loopcount requests to $desthost..." 
	  while [ $loopcount -ne 0 ] ; do
		if [ $verbose -ne 0 ] ; then
                	echo WIZ | $nc -w 1 -v $desthost $smtp
		else
			echo WIZ | $nc -w 1 $desthost $smtp > /dev/null 2>&1 &
		fi                
		sleep $sleep
                echo -ne "$loopcount             \015"
		loopcount=`expr $loopcount - 1`
          done
	  echo "Done!"
	else 
	  echo "fatal: $smtp port is not open"
	  exit 0
	fi
        ;;

'smtp')
	  body="$email"  
        #if nc -z $desthost $smtp &>/dev/null ; then
          echo "Sending $loopcount requests to $desthost..."
          while [ $loopcount -ne 0 ] ; do
		DATE=`date +'%a, %e %b %G %T %z'`
                if [ $verbose -ne 0 ] ; then
			EMAIL
		else
			EMAIL > /dev/null 2>&1 &
			fi
                sleep $sleep
                echo -ne "$loopcount             \015"
                loopcount=`expr $loopcount - 1`
          done
          echo "Done!"
        #else
        #  echo "fatal: $smtp port not open"
        #  exit 0
        #fi
        ;;

'eicar')
	  body="$testvirus"
        #if nc -z $desthost $smtp &>/dev/null ; then
          echo "Sending $loopcount requests to $desthost..."
          while [ $loopcount -ne 0 ] ; do
		DATE=`date +'%a, %e %b %G %T %z'`

		if [ $verbose -ne 0 ] ; then
			EMAIL
		else
			EMAIL > /dev/null 2>&1 &
                fi
		sleep $sleep
                echo -ne "$loopcount             \015"
                loopcount=`expr $loopcount - 1`
          done
          echo "Done!"
        #else
        #  echo "fatal: $smtp port not open"
        #  exit 0
        #fi
        ;;

'ftp')
 	if nc -z $desthost $ftp &>/dev/null ; then
          echo "Sending $loopcount requests to $desthost..."
	  while [ $loopcount -ne 0 ] ; do
		if [ $verbose -ne 0 ] ; then	
			FTP
		else
			FTP > /dev/null 2>&1 &
		fi
		sleep $sleep
                echo -ne "$loopcount             \015"
		loopcount=`expr $loopcount - 1`
	  done
	  echo "Done!"
	else
	  echo "fatal: $ftp port is not open"
	  exit 0
	fi
	;; 	

'pop3')
        if nc -z $desthost $pop3 &>/dev/null ; then
          echo "Sending $loopcount requests to $desthost..."
          while [ $loopcount -ne 0 ] ; do
                if [ $verbose -ne 0 ] ; then
                  POP3      
                else
			POP3 > /dev/null 2>&1 & 
                fi
                sleep $sleep
                echo -ne "$loopcount             \015"
                loopcount=`expr $loopcount - 1`
          done
          echo "Done!"
        else
          echo "fatal: $pop3 port is not open"
          exit 0
        fi
        ;;

'ssh')
	if nc -z $desthost $ssh &>/dev/null ; then
          echo "Sending $loopcount requests to $desthost..."
	  while [ $loopcount -ne 0 ] ; do
		if [ $verbose -ne 0 ] ; then
			SSH
		else
			SSH > /dev/null 2>&1 &
		fi
		sleep $sleep
                echo -ne "$loopcount             \015"
		loopcount=`expr $loopcount - 1`
	  done
	  echo "Done!"
	else
	  echo "fatal: $ssh port not open"
	  exit 0
	fi
	;;

'boping')
          echo "Sending $loopcount requests to $desthost..."
          while [ $loopcount -ne 0 ] ; do
		if [ $verbose -ne 0 ] ; then
			BOPING
		else
			BOPING > /dev/null 2>&1 &
                fi
		sleep $sleep
                echo -ne "$loopcount             \015"
                loopcount=`expr $loopcount - 1`
          done
          echo "Done!"
          exit 1
        ;;
*)
        echo "Unknown Protocol"
        exit 1
        ;;
esac




